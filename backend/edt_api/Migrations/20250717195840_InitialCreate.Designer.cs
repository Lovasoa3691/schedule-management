// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using edt_api.config;

#nullable disable

namespace edt_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250717195840_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("edt_api.models.Authentification", b =>
                {
                    b.Property<string>("idAuth")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("mdp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("utilisateurId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("idAuth");

                    b.HasIndex("utilisateurId");

                    b.ToTable("Authentifications");
                });

            modelBuilder.Entity("edt_api.models.Disponibilite", b =>
                {
                    b.Property<string>("numDispo")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("dateDispo")
                        .HasColumnType("date");

                    b.Property<string>("enseignantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("hDeb")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("hFin")
                        .HasColumnType("time(6)");

                    b.HasKey("numDispo");

                    b.HasIndex("enseignantId");

                    b.ToTable("Disponibilites");
                });

            modelBuilder.Entity("edt_api.models.Edt", b =>
                {
                    b.Property<string>("numEd")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("disponibilite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("enseignantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("hDeb")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("hFin")
                        .HasColumnType("time(6)");

                    b.Property<DateOnly>("jour")
                        .HasColumnType("date");

                    b.Property<string>("matiereId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("mentionId")
                        .HasColumnType("int");

                    b.Property<int>("niveauId")
                        .HasColumnType("int");

                    b.Property<string>("responsableId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("salleId")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("numEd");

                    b.HasIndex("enseignantId");

                    b.HasIndex("matiereId");

                    b.HasIndex("mentionId");

                    b.HasIndex("niveauId");

                    b.HasIndex("responsableId");

                    b.HasIndex("salleId");

                    b.ToTable("Edts");
                });

            modelBuilder.Entity("edt_api.models.Matiere", b =>
                {
                    b.Property<string>("codeMat")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("coefficient")
                        .HasColumnType("int");

                    b.Property<string>("enseignantId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("mentionId")
                        .HasColumnType("int");

                    b.Property<int>("nbHor")
                        .HasColumnType("int");

                    b.Property<int>("niveauId")
                        .HasColumnType("int");

                    b.Property<string>("nomMat")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("codeMat");

                    b.HasIndex("enseignantId");

                    b.HasIndex("mentionId");

                    b.HasIndex("niveauId");

                    b.ToTable("Matieres");
                });

            modelBuilder.Entity("edt_api.models.Mention", b =>
                {
                    b.Property<int>("idMent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idMent"));

                    b.Property<string>("nomMent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idMent");

                    b.ToTable("Mentions");
                });

            modelBuilder.Entity("edt_api.models.Niveau", b =>
                {
                    b.Property<int>("idNiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idNiv"));

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idNiv");

                    b.ToTable("Niveaux");
                });

            modelBuilder.Entity("edt_api.models.Salle", b =>
                {
                    b.Property<int>("idSalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idSalle"));

                    b.Property<int>("capacite")
                        .HasColumnType("int");

                    b.Property<string>("localisation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nomSalle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("typeSalle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idSalle");

                    b.ToTable("Salles");
                });

            modelBuilder.Entity("edt_api.models.Utilisateur", b =>
                {
                    b.Property<string>("idUt")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("typeUtilisateur")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.HasKey("idUt");

                    b.ToTable("Utilisateurs");

                    b.HasDiscriminator<string>("typeUtilisateur").HasValue("Utilisateur");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("edt_api.models.Enseignant", b =>
                {
                    b.HasBaseType("edt_api.models.Utilisateur");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Enseignant");
                });

            modelBuilder.Entity("edt_api.models.Responsable", b =>
                {
                    b.HasBaseType("edt_api.models.Utilisateur");

                    b.Property<string>("fonction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Responsable");
                });

            modelBuilder.Entity("edt_api.models.Authentification", b =>
                {
                    b.HasOne("edt_api.models.Utilisateur", "utilisateur")
                        .WithMany("Authentifications")
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("edt_api.models.Disponibilite", b =>
                {
                    b.HasOne("edt_api.models.Enseignant", "enseignant")
                        .WithMany("disponibilites")
                        .HasForeignKey("enseignantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("enseignant");
                });

            modelBuilder.Entity("edt_api.models.Edt", b =>
                {
                    b.HasOne("edt_api.models.Enseignant", "enseignant")
                        .WithMany("edts")
                        .HasForeignKey("enseignantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Matiere", "matiere")
                        .WithMany("edts")
                        .HasForeignKey("matiereId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Mention", "mention")
                        .WithMany("edts")
                        .HasForeignKey("mentionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Niveau", "niveau")
                        .WithMany("edts")
                        .HasForeignKey("niveauId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Responsable", "responsable")
                        .WithMany("edts")
                        .HasForeignKey("responsableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Salle", "salle")
                        .WithMany("edts")
                        .HasForeignKey("salleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("enseignant");

                    b.Navigation("matiere");

                    b.Navigation("mention");

                    b.Navigation("niveau");

                    b.Navigation("responsable");

                    b.Navigation("salle");
                });

            modelBuilder.Entity("edt_api.models.Matiere", b =>
                {
                    b.HasOne("edt_api.models.Enseignant", "enseignant")
                        .WithMany("matiere")
                        .HasForeignKey("enseignantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("edt_api.models.Mention", "mention")
                        .WithMany("matiere")
                        .HasForeignKey("mentionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("edt_api.models.Niveau", "niveau")
                        .WithMany("matiere")
                        .HasForeignKey("niveauId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("enseignant");

                    b.Navigation("mention");

                    b.Navigation("niveau");
                });

            modelBuilder.Entity("edt_api.models.Matiere", b =>
                {
                    b.Navigation("edts");
                });

            modelBuilder.Entity("edt_api.models.Mention", b =>
                {
                    b.Navigation("edts");

                    b.Navigation("matiere");
                });

            modelBuilder.Entity("edt_api.models.Niveau", b =>
                {
                    b.Navigation("edts");

                    b.Navigation("matiere");
                });

            modelBuilder.Entity("edt_api.models.Salle", b =>
                {
                    b.Navigation("edts");
                });

            modelBuilder.Entity("edt_api.models.Utilisateur", b =>
                {
                    b.Navigation("Authentifications");
                });

            modelBuilder.Entity("edt_api.models.Enseignant", b =>
                {
                    b.Navigation("disponibilites");

                    b.Navigation("edts");

                    b.Navigation("matiere");
                });

            modelBuilder.Entity("edt_api.models.Responsable", b =>
                {
                    b.Navigation("edts");
                });
#pragma warning restore 612, 618
        }
    }
}
